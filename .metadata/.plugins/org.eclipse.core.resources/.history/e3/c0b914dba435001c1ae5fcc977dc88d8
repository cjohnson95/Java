package com.acme.sales.customer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@CrossOrigin
@RestController
@RequestMapping("/api/customers")
public class CustomersController {

	@Autowired
	private CustomerRepository custRepo;
	
	
	@GetMapping
	public ResponseEntity<Iterable<Customer>>GetAll() {
	var customers = custRepo.findAll();
	return new ResponseEntity<Iterable<Customer>>(customers, HttpStatus.OK);

	}
	
	@GetMapping("{id}")										//This is the method to return data from the customer table by the PK or Id
	public Customer GetById(@PathVariable int id ) {
		
		var customer = custRepo.findById(id);
		if(customer.isEmpty()) {
			return null;										// if the instance, in this case, "customer", is not found; more likely to use "Not Found"
		}														//instead of "null". This is displayed on the user gui page, that's why.
		return customer.get();
													
		
	}
	
	@PostMapping
	public Customer Insert(@RequestBody Customer customer) {
	
		customer.setId(0);
		var newCustomer = custRepo.save(customer);
		custRepo.save(customer);
		return newCustomer;
	}		
	
	@PutMapping("{id}")
	public Customer Update(@PathVariable int id, @RequestBody Customer customer) throws Exception {
		if(customer.getId() != id) {
			throw new Exception("Ids do not match");
		}
		var updatedCustomer = custRepo.save(customer);
		return updatedCustomer;
	}
	
	@DeleteMapping("{id}")
		public Customer Delete(@PathVariable int id) {
		var customer = custRepo.findById(id);
		if (customer.isEmpty()) {
			return null;
		}
		custRepo.deleteById(id);
		return customer.get();
	}
	
}
	


	
	


